package newsemc.com.awit.news.newsemcapp.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import newsemc.com.awit.news.newsemcapp.dao.DepartsInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DEPARTS_INFO.
*/
public class DepartsInfoDao extends AbstractDao<DepartsInfo, Void> {

    public static final String TABLENAME = "DEPARTS_INFO";

    /**
     * Properties of entity DepartsInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Duty = new Property(2, String.class, "duty", false, "DUTY");
        public final static Property F_loginId = new Property(3, String.class, "f_loginId", false, "F_LOGIN_ID");
    };

    private DaoSession daoSession;

    private Query<DepartsInfo> loginInfo_DepartsInfoListQuery;

    public DepartsInfoDao(DaoConfig config) {
        super(config);
    }
    
    public DepartsInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DEPARTS_INFO' (" + //
                "'ID' TEXT," + // 0: id
                "'NAME' TEXT," + // 1: name
                "'DUTY' TEXT," + // 2: duty
                "'F_LOGIN_ID' TEXT NOT NULL );"); // 3: f_loginId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DEPARTS_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DepartsInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String duty = entity.getDuty();
        if (duty != null) {
            stmt.bindString(3, duty);
        }
        stmt.bindString(4, entity.getF_loginId());
    }

    @Override
    protected void attachEntity(DepartsInfo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public DepartsInfo readEntity(Cursor cursor, int offset) {
        DepartsInfo entity = new DepartsInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // duty
            cursor.getString(offset + 3) // f_loginId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DepartsInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDuty(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setF_loginId(cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(DepartsInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(DepartsInfo entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "departsInfoList" to-many relationship of LoginInfo. */
    public List<DepartsInfo> _queryLoginInfo_DepartsInfoList(String f_loginId) {
        synchronized (this) {
            if (loginInfo_DepartsInfoListQuery == null) {
                QueryBuilder<DepartsInfo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.F_loginId.eq(null));
                loginInfo_DepartsInfoListQuery = queryBuilder.build();
            }
        }
        Query<DepartsInfo> query = loginInfo_DepartsInfoListQuery.forCurrentThread();
        query.setParameter(0, f_loginId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getLoginInfoDao().getAllColumns());
            builder.append(" FROM DEPARTS_INFO T");
            builder.append(" LEFT JOIN LOGIN_INFO T0 ON T.'F_LOGIN_ID'=T0.'USER_ID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected DepartsInfo loadCurrentDeep(Cursor cursor, boolean lock) {
        DepartsInfo entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        LoginInfo loginInfo = loadCurrentOther(daoSession.getLoginInfoDao(), cursor, offset);
         if(loginInfo != null) {
            entity.setLoginInfo(loginInfo);
        }

        return entity;    
    }

    public DepartsInfo loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<DepartsInfo> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<DepartsInfo> list = new ArrayList<DepartsInfo>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<DepartsInfo> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<DepartsInfo> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
