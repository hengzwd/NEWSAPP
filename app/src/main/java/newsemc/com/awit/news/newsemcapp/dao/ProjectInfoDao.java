package newsemc.com.awit.news.newsemcapp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import newsemc.com.awit.news.newsemcapp.dao.ProjectInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PROJECT_INFO.
*/
public class ProjectInfoDao extends AbstractDao<ProjectInfo, String> {

    public static final String TABLENAME = "PROJECT_INFO";

    /**
     * Properties of entity ProjectInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Pname = new Property(1, String.class, "pname", false, "PNAME");
        public final static Property Code = new Property(2, String.class, "code", false, "CODE");
        public final static Property Nameabbr = new Property(3, String.class, "nameabbr", false, "NAMEABBR");
        public final static Property ConstructiondepId = new Property(4, String.class, "constructiondepId", false, "CONSTRUCTIONDEP_ID");
        public final static Property Bname = new Property(5, String.class, "bname", false, "BNAME");
        public final static Property DesignCompanyName = new Property(6, String.class, "designCompanyName", false, "DESIGN_COMPANY_NAME");
        public final static Property ExamineCompanyName = new Property(7, String.class, "examineCompanyName", false, "EXAMINE_COMPANY_NAME");
        public final static Property Startdate = new Property(8, String.class, "startdate", false, "STARTDATE");
        public final static Property Rundate = new Property(9, String.class, "rundate", false, "RUNDATE");
        public final static Property Updatedate = new Property(10, String.class, "updatedate", false, "UPDATEDATE");
        public final static Property Description = new Property(11, String.class, "description", false, "DESCRIPTION");
    };


    public ProjectInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ProjectInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PROJECT_INFO' (" + //
                "'ID' TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "'PNAME' TEXT," + // 1: pname
                "'CODE' TEXT," + // 2: code
                "'NAMEABBR' TEXT," + // 3: nameabbr
                "'CONSTRUCTIONDEP_ID' TEXT," + // 4: constructiondepId
                "'BNAME' TEXT," + // 5: bname
                "'DESIGN_COMPANY_NAME' TEXT," + // 6: designCompanyName
                "'EXAMINE_COMPANY_NAME' TEXT," + // 7: examineCompanyName
                "'STARTDATE' TEXT," + // 8: startdate
                "'RUNDATE' TEXT," + // 9: rundate
                "'UPDATEDATE' TEXT," + // 10: updatedate
                "'DESCRIPTION' TEXT);"); // 11: description
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PROJECT_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ProjectInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String pname = entity.getPname();
        if (pname != null) {
            stmt.bindString(2, pname);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(3, code);
        }
 
        String nameabbr = entity.getNameabbr();
        if (nameabbr != null) {
            stmt.bindString(4, nameabbr);
        }
 
        String constructiondepId = entity.getConstructiondepId();
        if (constructiondepId != null) {
            stmt.bindString(5, constructiondepId);
        }
 
        String bname = entity.getBname();
        if (bname != null) {
            stmt.bindString(6, bname);
        }
 
        String designCompanyName = entity.getDesignCompanyName();
        if (designCompanyName != null) {
            stmt.bindString(7, designCompanyName);
        }
 
        String examineCompanyName = entity.getExamineCompanyName();
        if (examineCompanyName != null) {
            stmt.bindString(8, examineCompanyName);
        }
 
        String startdate = entity.getStartdate();
        if (startdate != null) {
            stmt.bindString(9, startdate);
        }
 
        String rundate = entity.getRundate();
        if (rundate != null) {
            stmt.bindString(10, rundate);
        }
 
        String updatedate = entity.getUpdatedate();
        if (updatedate != null) {
            stmt.bindString(11, updatedate);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(12, description);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ProjectInfo readEntity(Cursor cursor, int offset) {
        ProjectInfo entity = new ProjectInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // pname
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // code
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nameabbr
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // constructiondepId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // bname
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // designCompanyName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // examineCompanyName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // startdate
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // rundate
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // updatedate
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // description
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ProjectInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNameabbr(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setConstructiondepId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBname(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDesignCompanyName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setExamineCompanyName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStartdate(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRundate(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUpdatedate(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDescription(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(ProjectInfo entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(ProjectInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
