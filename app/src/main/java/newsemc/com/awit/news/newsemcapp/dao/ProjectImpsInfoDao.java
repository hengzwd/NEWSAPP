package newsemc.com.awit.news.newsemcapp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import newsemc.com.awit.news.newsemcapp.dao.ProjectImpsInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PROJECT_IMPS_INFO.
*/
public class ProjectImpsInfoDao extends AbstractDao<ProjectImpsInfo, String> {

    public static final String TABLENAME = "PROJECT_IMPS_INFO";

    /**
     * Properties of entity ProjectImpsInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Projectname = new Property(0, String.class, "projectname", true, "PROJECTNAME");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Lc = new Property(2, String.class, "lc", false, "LC");
        public final static Property Middl = new Property(3, String.class, "middl", false, "MIDDL");
        public final static Property Sitelength = new Property(4, String.class, "sitelength", false, "SITELENGTH");
        public final static Property Planopentime = new Property(5, String.class, "planopentime", false, "PLANOPENTIME");
        public final static Property Planclosetime = new Property(6, String.class, "planclosetime", false, "PLANCLOSETIME");
    };


    public ProjectImpsInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ProjectImpsInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PROJECT_IMPS_INFO' (" + //
                "'PROJECTNAME' TEXT PRIMARY KEY NOT NULL ," + // 0: projectname
                "'NAME' TEXT," + // 1: name
                "'LC' TEXT," + // 2: lc
                "'MIDDL' TEXT," + // 3: middl
                "'SITELENGTH' TEXT," + // 4: sitelength
                "'PLANOPENTIME' TEXT," + // 5: planopentime
                "'PLANCLOSETIME' TEXT);"); // 6: planclosetime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PROJECT_IMPS_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ProjectImpsInfo entity) {
        stmt.clearBindings();
 
        String projectname = entity.getProjectname();
        if (projectname != null) {
            stmt.bindString(1, projectname);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String lc = entity.getLc();
        if (lc != null) {
            stmt.bindString(3, lc);
        }
 
        String middl = entity.getMiddl();
        if (middl != null) {
            stmt.bindString(4, middl);
        }
 
        String sitelength = entity.getSitelength();
        if (sitelength != null) {
            stmt.bindString(5, sitelength);
        }
 
        String planopentime = entity.getPlanopentime();
        if (planopentime != null) {
            stmt.bindString(6, planopentime);
        }
 
        String planclosetime = entity.getPlanclosetime();
        if (planclosetime != null) {
            stmt.bindString(7, planclosetime);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ProjectImpsInfo readEntity(Cursor cursor, int offset) {
        ProjectImpsInfo entity = new ProjectImpsInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // projectname
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // lc
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // middl
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sitelength
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // planopentime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // planclosetime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ProjectImpsInfo entity, int offset) {
        entity.setProjectname(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLc(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMiddl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSitelength(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPlanopentime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPlanclosetime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(ProjectImpsInfo entity, long rowId) {
        return entity.getProjectname();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(ProjectImpsInfo entity) {
        if(entity != null) {
            return entity.getProjectname();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
