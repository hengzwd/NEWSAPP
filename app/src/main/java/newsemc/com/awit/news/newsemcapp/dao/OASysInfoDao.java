package newsemc.com.awit.news.newsemcapp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import newsemc.com.awit.news.newsemcapp.dao.OASysInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table OASYS_INFO.
*/
public class OASysInfoDao extends AbstractDao<OASysInfo, String> {

    public static final String TABLENAME = "OASYS_INFO";

    /**
     * Properties of entity OASysInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Fileid = new Property(0, String.class, "fileid", true, "FILEID");
        public final static Property Handleid = new Property(1, String.class, "handleid", false, "HANDLEID");
        public final static Property Detail = new Property(2, String.class, "detail", false, "DETAIL");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Enddate = new Property(4, String.class, "enddate", false, "ENDDATE");
    };


    public OASysInfoDao(DaoConfig config) {
        super(config);
    }
    
    public OASysInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'OASYS_INFO' (" + //
                "'FILEID' TEXT PRIMARY KEY NOT NULL ," + // 0: fileid
                "'HANDLEID' TEXT," + // 1: handleid
                "'DETAIL' TEXT," + // 2: detail
                "'TITLE' TEXT," + // 3: title
                "'ENDDATE' TEXT);"); // 4: enddate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'OASYS_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, OASysInfo entity) {
        stmt.clearBindings();
 
        String fileid = entity.getFileid();
        if (fileid != null) {
            stmt.bindString(1, fileid);
        }
 
        String handleid = entity.getHandleid();
        if (handleid != null) {
            stmt.bindString(2, handleid);
        }
 
        String detail = entity.getDetail();
        if (detail != null) {
            stmt.bindString(3, detail);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String enddate = entity.getEnddate();
        if (enddate != null) {
            stmt.bindString(5, enddate);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public OASysInfo readEntity(Cursor cursor, int offset) {
        OASysInfo entity = new OASysInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // fileid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // handleid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // detail
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // enddate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, OASysInfo entity, int offset) {
        entity.setFileid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setHandleid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDetail(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEnddate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(OASysInfo entity, long rowId) {
        return entity.getFileid();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(OASysInfo entity) {
        if(entity != null) {
            return entity.getFileid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
