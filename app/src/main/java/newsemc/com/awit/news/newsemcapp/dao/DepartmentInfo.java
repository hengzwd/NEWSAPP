package newsemc.com.awit.news.newsemcapp.dao;

import newsemc.com.awit.news.newsemcapp.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table DEPARTMENT_INFO.
 */
public class DepartmentInfo {

    private String id;
    private String name;
    private String duty;
    /** Not-null value. */
    private String f_userId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DepartmentInfoDao myDao;

    private PersonInfo personInfo;
    private String personInfo__resolvedKey;


    public DepartmentInfo() {
    }

    public DepartmentInfo(String id, String name, String duty, String f_userId) {
        this.id = id;
        this.name = name;
        this.duty = duty;
        this.f_userId = f_userId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDepartmentInfoDao() : null;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDuty() {
        return duty;
    }

    public void setDuty(String duty) {
        this.duty = duty;
    }

    /** Not-null value. */
    public String getF_userId() {
        return f_userId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setF_userId(String f_userId) {
        this.f_userId = f_userId;
    }

    /** To-one relationship, resolved on first access. */
    public PersonInfo getPersonInfo() {
        String __key = this.f_userId;
        if (personInfo__resolvedKey == null || personInfo__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PersonInfoDao targetDao = daoSession.getPersonInfoDao();
            PersonInfo personInfoNew = targetDao.load(__key);
            synchronized (this) {
                personInfo = personInfoNew;
            	personInfo__resolvedKey = __key;
            }
        }
        return personInfo;
    }

    public void setPersonInfo(PersonInfo personInfo) {
        if (personInfo == null) {
            throw new DaoException("To-one property 'f_userId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.personInfo = personInfo;
            f_userId = personInfo.getUserId();
            personInfo__resolvedKey = f_userId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
