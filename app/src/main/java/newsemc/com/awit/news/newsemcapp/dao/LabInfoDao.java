package newsemc.com.awit.news.newsemcapp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import newsemc.com.awit.news.newsemcapp.dao.LabInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table LAB_INFO.
*/
public class LabInfoDao extends AbstractDao<LabInfo, String> {

    public static final String TABLENAME = "LAB_INFO";

    /**
     * Properties of entity LabInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Sectionname = new Property(0, String.class, "sectionname", true, "SECTIONNAME");
        public final static Property Yljtotal = new Property(1, String.class, "yljtotal", false, "YLJTOTAL");
        public final static Property Yljusenum = new Property(2, String.class, "yljusenum", false, "YLJUSENUM");
        public final static Property Wnjtotal = new Property(3, String.class, "wnjtotal", false, "WNJTOTAL");
        public final static Property Wnjusenum = new Property(4, String.class, "wnjusenum", false, "WNJUSENUM");
        public final static Property Reporttotal = new Property(5, String.class, "reporttotal", false, "REPORTTOTAL");
        public final static Property Hntinfo = new Property(6, String.class, "hntinfo", false, "HNTINFO");
        public final static Property Gjinfo = new Property(7, String.class, "gjinfo", false, "GJINFO");
        public final static Property Gjhjinfo = new Property(8, String.class, "gjhjinfo", false, "GJHJINFO");
        public final static Property Gjjxinfo = new Property(9, String.class, "gjjxinfo", false, "GJJXINFO");
    };


    public LabInfoDao(DaoConfig config) {
        super(config);
    }
    
    public LabInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LAB_INFO' (" + //
                "'SECTIONNAME' TEXT PRIMARY KEY NOT NULL ," + // 0: sectionname
                "'YLJTOTAL' TEXT," + // 1: yljtotal
                "'YLJUSENUM' TEXT," + // 2: yljusenum
                "'WNJTOTAL' TEXT," + // 3: wnjtotal
                "'WNJUSENUM' TEXT," + // 4: wnjusenum
                "'REPORTTOTAL' TEXT," + // 5: reporttotal
                "'HNTINFO' TEXT," + // 6: hntinfo
                "'GJINFO' TEXT," + // 7: gjinfo
                "'GJHJINFO' TEXT," + // 8: gjhjinfo
                "'GJJXINFO' TEXT);"); // 9: gjjxinfo
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LAB_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LabInfo entity) {
        stmt.clearBindings();
 
        String sectionname = entity.getSectionname();
        if (sectionname != null) {
            stmt.bindString(1, sectionname);
        }
 
        String yljtotal = entity.getYljtotal();
        if (yljtotal != null) {
            stmt.bindString(2, yljtotal);
        }
 
        String yljusenum = entity.getYljusenum();
        if (yljusenum != null) {
            stmt.bindString(3, yljusenum);
        }
 
        String wnjtotal = entity.getWnjtotal();
        if (wnjtotal != null) {
            stmt.bindString(4, wnjtotal);
        }
 
        String wnjusenum = entity.getWnjusenum();
        if (wnjusenum != null) {
            stmt.bindString(5, wnjusenum);
        }
 
        String reporttotal = entity.getReporttotal();
        if (reporttotal != null) {
            stmt.bindString(6, reporttotal);
        }
 
        String hntinfo = entity.getHntinfo();
        if (hntinfo != null) {
            stmt.bindString(7, hntinfo);
        }
 
        String gjinfo = entity.getGjinfo();
        if (gjinfo != null) {
            stmt.bindString(8, gjinfo);
        }
 
        String gjhjinfo = entity.getGjhjinfo();
        if (gjhjinfo != null) {
            stmt.bindString(9, gjhjinfo);
        }
 
        String gjjxinfo = entity.getGjjxinfo();
        if (gjjxinfo != null) {
            stmt.bindString(10, gjjxinfo);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public LabInfo readEntity(Cursor cursor, int offset) {
        LabInfo entity = new LabInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // sectionname
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // yljtotal
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // yljusenum
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // wnjtotal
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // wnjusenum
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // reporttotal
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // hntinfo
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // gjinfo
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // gjhjinfo
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // gjjxinfo
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LabInfo entity, int offset) {
        entity.setSectionname(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setYljtotal(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setYljusenum(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWnjtotal(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWnjusenum(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setReporttotal(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHntinfo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGjinfo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setGjhjinfo(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setGjjxinfo(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(LabInfo entity, long rowId) {
        return entity.getSectionname();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(LabInfo entity) {
        if(entity != null) {
            return entity.getSectionname();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
