package newsemc.com.awit.news.newsemcapp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import android.util.Log;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import newsemc.com.awit.news.newsemcapp.dao.ImageInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table IMAGE_INFO.
*/
public class ImageInfoDao extends AbstractDao<ImageInfo, String> {

    public static final String TABLENAME = "IMAGE_INFO";

    /**
     * Properties of entity ImageInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Infoid = new Property(0, String.class, "infoid", true, "INFOID");
        public final static Property Infotype = new Property(1, String.class, "infotype", false, "INFOTYPE");
        public final static Property Infoname = new Property(2, String.class, "infoname", false, "INFONAME");
        public final static Property Infoimg = new Property(3, String.class, "infoimg", false, "INFOIMG");
        public final static Property Infourl = new Property(4, String.class, "infourl", false, "INFOURL");
        public final static Property Infocontent = new Property(5, String.class, "infocontent", false, "INFOCONTENT");
        public final static Property Num = new Property(6, String.class, "num", false, "NUM");
        public final static Property Pageno = new Property(7, String.class, "pageno", false, "PAGENO");
        public final static Property Infodate = new Property(8, String.class, "infodate", false, "INFODATE");
        public final static Property Source = new Property(9, String.class, "Source", false, "SOURCE");
        public final static Property Publisher = new Property(10, String.class, "Publisher", false, "PUBLISHER");
        public final static Property Isnew = new Property(11, String.class, "Isnew", false, "ISNEW");
    };


    public ImageInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ImageInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'IMAGE_INFO' (" + //
                "'INFOID' TEXT PRIMARY KEY NOT NULL ," + // 0: infoid
                "'INFOTYPE' TEXT," + // 1: infotype
                "'INFONAME' TEXT," + // 2: infoname
                "'INFOIMG' TEXT," + // 3: infoimg
                "'INFOURL' TEXT," + // 4: infourl
                "'INFOCONTENT' TEXT," + // 5: infocontent
                "'NUM' TEXT," + // 6: num
                "'PAGENO' TEXT," + // 7: pageno
                "'INFODATE' TEXT," + // 8: infodate
                "'SOURCE' TEXT," +  // 9: source
                "'PUBLISHER' TEXT," + // 10: publisher
                "'ISNEW' TEXT);"); // 11: isnew
        Log.d("BBBBBBBBBBBBBBBBBBBB","New Table Created!");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'IMAGE_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ImageInfo entity) {
        stmt.clearBindings();
 
        String infoid = entity.getInfoid();
        if (infoid != null) {
            stmt.bindString(1, infoid);
        }
 
        String infotype = entity.getInfotype();
        if (infotype != null) {
            stmt.bindString(2, infotype);
        }
 
        String infoname = entity.getInfoname();
        if (infoname != null) {
            stmt.bindString(3, infoname);
        }
 
        String infoimg = entity.getInfoimg();
        if (infoimg != null) {
            stmt.bindString(4, infoimg);
        }
 
        String infourl = entity.getInfourl();
        if (infourl != null) {
            stmt.bindString(5, infourl);
        }
 
        String infocontent = entity.getInfocontent();
        if (infocontent != null) {
            stmt.bindString(6, infocontent);
        }
 
        String num = entity.getNum();
        if (num != null) {
            stmt.bindString(7, num);
        }
 
        String pageno = entity.getPageno();
        if (pageno != null) {
            stmt.bindString(8, pageno);
        }
 
        String infodate = entity.getInfodate();
        if (infodate != null) {
            stmt.bindString(9, infodate);
        }

        String source =entity.getSource();
        if(source != null){
            stmt.bindString(10, source);
        }

        String publisher =entity.getPublisher();
        if(publisher != null){
            stmt.bindString(11, publisher);
        }

        String isnew =entity.getIsnew();
        if(isnew != null){
            stmt.bindString(12, isnew);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ImageInfo readEntity(Cursor cursor, int offset) {
        ImageInfo entity = new ImageInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // infoid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // infotype
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // infoname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // infoimg
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // infourl
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // infocontent
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // num
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // pageno
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // infodate
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // source
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10),//publisher
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) //isnew
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ImageInfo entity, int offset) {
        entity.setInfoid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setInfotype(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setInfoname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setInfoimg(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setInfourl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setInfocontent(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNum(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPageno(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setInfodate(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSource(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPublisher(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIsnew(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(ImageInfo entity, long rowId) {
        return entity.getInfoid();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(ImageInfo entity) {
        if(entity != null) {
            return entity.getInfoid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
