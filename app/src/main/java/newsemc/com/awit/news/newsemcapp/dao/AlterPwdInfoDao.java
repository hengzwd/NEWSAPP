package newsemc.com.awit.news.newsemcapp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import newsemc.com.awit.news.newsemcapp.dao.AlterPwdInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ALTER_PWD_INFO.
*/
public class AlterPwdInfoDao extends AbstractDao<AlterPwdInfo, String> {

    public static final String TABLENAME = "ALTER_PWD_INFO";

    /**
     * Properties of entity AlterPwdInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property UserId = new Property(0, String.class, "userId", true, "USER_ID");
        public final static Property Oldpassword = new Property(1, String.class, "oldpassword", false, "OLDPASSWORD");
        public final static Property Newpassword = new Property(2, String.class, "newpassword", false, "NEWPASSWORD");
        public final static Property Ssid = new Property(3, String.class, "ssid", false, "SSID");
    };


    public AlterPwdInfoDao(DaoConfig config) {
        super(config);
    }
    
    public AlterPwdInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ALTER_PWD_INFO' (" + //
                "'USER_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: userId
                "'OLDPASSWORD' TEXT," + // 1: oldpassword
                "'NEWPASSWORD' TEXT," + // 2: newpassword
                "'SSID' TEXT);"); // 3: ssid
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ALTER_PWD_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AlterPwdInfo entity) {
        stmt.clearBindings();
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(1, userId);
        }
 
        String oldpassword = entity.getOldpassword();
        if (oldpassword != null) {
            stmt.bindString(2, oldpassword);
        }
 
        String newpassword = entity.getNewpassword();
        if (newpassword != null) {
            stmt.bindString(3, newpassword);
        }
 
        String ssid = entity.getSsid();
        if (ssid != null) {
            stmt.bindString(4, ssid);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AlterPwdInfo readEntity(Cursor cursor, int offset) {
        AlterPwdInfo entity = new AlterPwdInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // userId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // oldpassword
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // newpassword
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // ssid
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AlterPwdInfo entity, int offset) {
        entity.setUserId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setOldpassword(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNewpassword(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSsid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(AlterPwdInfo entity, long rowId) {
        return entity.getUserId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(AlterPwdInfo entity) {
        if(entity != null) {
            return entity.getUserId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
