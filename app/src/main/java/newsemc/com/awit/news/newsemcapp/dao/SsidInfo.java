package newsemc.com.awit.news.newsemcapp.dao;

import java.util.List;
import newsemc.com.awit.news.newsemcapp.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table SSID_INFO.
 */
public class SsidInfo {

    private String userId;
    private String ssid;
    private String name;
    private String contact;
    private String sex;
    private String account;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient SsidInfoDao myDao;

    private List<DeptsInfo> deptsInfoList;

    public SsidInfo() {
    }

    public SsidInfo(String userId) {
        this.userId = userId;
    }

    public SsidInfo(String userId, String ssid, String name, String contact, String sex, String account) {
        this.userId = userId;
        this.ssid = ssid;
        this.name = name;
        this.contact = contact;
        this.sex = sex;
        this.account = account;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSsidInfoDao() : null;
    }

    public String getUserId() {
        return userId;
    }

    public void setUserId(String userId) {
        this.userId = userId;
    }

    public String getSsid() {
        return ssid;
    }

    public void setSsid(String ssid) {
        this.ssid = ssid;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getContact() {
        return contact;
    }

    public void setContact(String contact) {
        this.contact = contact;
    }

    public String getSex() {
        return sex;
    }

    public void setSex(String sex) {
        this.sex = sex;
    }

    public String getAccount() {
        return account;
    }

    public void setAccount(String account) {
        this.account = account;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DeptsInfo> getDeptsInfoList() {
        if (deptsInfoList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DeptsInfoDao targetDao = daoSession.getDeptsInfoDao();
            List<DeptsInfo> deptsInfoListNew = targetDao._querySsidInfo_DeptsInfoList(userId);
            synchronized (this) {
                if(deptsInfoList == null) {
                    deptsInfoList = deptsInfoListNew;
                }
            }
        }
        return deptsInfoList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDeptsInfoList() {
        deptsInfoList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
