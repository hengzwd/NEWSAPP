package newsemc.com.awit.news.newsemcapp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import newsemc.com.awit.news.newsemcapp.dao.LxlBxoInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table LXL_BXO_INFO.
*/
public class LxlBxoInfoDao extends AbstractDao<LxlBxoInfo, String> {

    public static final String TABLENAME = "LXL_BXO_INFO";

    /**
     * Properties of entity LxlBxoInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Prosectionid = new Property(0, String.class, "prosectionid", true, "PROSECTIONID");
        public final static Property Prosectionname = new Property(1, String.class, "prosectionname", false, "PROSECTIONNAME");
        public final static Property Prositename = new Property(2, String.class, "prositename", false, "PROSITENAME");
        public final static Property Pointname = new Property(3, String.class, "pointname", false, "POINTNAME");
        public final static Property Sgjd = new Property(4, String.class, "sgjd", false, "SGJD");
        public final static Property Warnrecord = new Property(5, String.class, "warnrecord", false, "WARNRECORD");
        public final static Property Buildname = new Property(6, String.class, "buildname", false, "BUILDNAME");
        public final static Property Chargename = new Property(7, String.class, "chargename", false, "CHARGENAME");
        public final static Property Flow = new Property(8, String.class, "flow", false, "FLOW");
    };


    public LxlBxoInfoDao(DaoConfig config) {
        super(config);
    }
    
    public LxlBxoInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LXL_BXO_INFO' (" + //
                "'PROSECTIONID' TEXT PRIMARY KEY NOT NULL ," + // 0: prosectionid
                "'PROSECTIONNAME' TEXT," + // 1: prosectionname
                "'PROSITENAME' TEXT," + // 2: prositename
                "'POINTNAME' TEXT," + // 3: pointname
                "'SGJD' TEXT," + // 4: sgjd
                "'WARNRECORD' TEXT," + // 5: warnrecord
                "'BUILDNAME' TEXT," + // 6: buildname
                "'CHARGENAME' TEXT," + // 7: chargename
                "'FLOW' TEXT);"); // 8: flow
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LXL_BXO_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LxlBxoInfo entity) {
        stmt.clearBindings();
 
        String prosectionid = entity.getProsectionid();
        if (prosectionid != null) {
            stmt.bindString(1, prosectionid);
        }
 
        String prosectionname = entity.getProsectionname();
        if (prosectionname != null) {
            stmt.bindString(2, prosectionname);
        }
 
        String prositename = entity.getPrositename();
        if (prositename != null) {
            stmt.bindString(3, prositename);
        }
 
        String pointname = entity.getPointname();
        if (pointname != null) {
            stmt.bindString(4, pointname);
        }
 
        String sgjd = entity.getSgjd();
        if (sgjd != null) {
            stmt.bindString(5, sgjd);
        }
 
        String warnrecord = entity.getWarnrecord();
        if (warnrecord != null) {
            stmt.bindString(6, warnrecord);
        }
 
        String buildname = entity.getBuildname();
        if (buildname != null) {
            stmt.bindString(7, buildname);
        }
 
        String chargename = entity.getChargename();
        if (chargename != null) {
            stmt.bindString(8, chargename);
        }
 
        String flow = entity.getFlow();
        if (flow != null) {
            stmt.bindString(9, flow);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public LxlBxoInfo readEntity(Cursor cursor, int offset) {
        LxlBxoInfo entity = new LxlBxoInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // prosectionid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // prosectionname
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // prositename
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pointname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sgjd
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // warnrecord
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // buildname
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // chargename
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // flow
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LxlBxoInfo entity, int offset) {
        entity.setProsectionid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setProsectionname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPrositename(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPointname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSgjd(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setWarnrecord(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBuildname(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setChargename(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFlow(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(LxlBxoInfo entity, long rowId) {
        return entity.getProsectionid();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(LxlBxoInfo entity) {
        if(entity != null) {
            return entity.getProsectionid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
