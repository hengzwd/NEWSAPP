package newsemc.com.awit.news.newsemcapp.dao;

import newsemc.com.awit.news.newsemcapp.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table DEPARTS_INFO.
 */
public class DepartsInfo {

    private String id;
    private String name;
    private String duty;
    /** Not-null value. */
    private String f_loginId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DepartsInfoDao myDao;

    private LoginInfo loginInfo;
    private String loginInfo__resolvedKey;


    public DepartsInfo() {
    }

    public DepartsInfo(String id, String name, String duty, String f_loginId) {
        this.id = id;
        this.name = name;
        this.duty = duty;
        this.f_loginId = f_loginId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDepartsInfoDao() : null;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDuty() {
        return duty;
    }

    public void setDuty(String duty) {
        this.duty = duty;
    }

    /** Not-null value. */
    public String getF_loginId() {
        return f_loginId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setF_loginId(String f_loginId) {
        this.f_loginId = f_loginId;
    }

    /** To-one relationship, resolved on first access. */
    public LoginInfo getLoginInfo() {
        String __key = this.f_loginId;
        if (loginInfo__resolvedKey == null || loginInfo__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LoginInfoDao targetDao = daoSession.getLoginInfoDao();
            LoginInfo loginInfoNew = targetDao.load(__key);
            synchronized (this) {
                loginInfo = loginInfoNew;
            	loginInfo__resolvedKey = __key;
            }
        }
        return loginInfo;
    }

    public void setLoginInfo(LoginInfo loginInfo) {
        if (loginInfo == null) {
            throw new DaoException("To-one property 'f_loginId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.loginInfo = loginInfo;
            f_loginId = loginInfo.getUserId();
            loginInfo__resolvedKey = f_loginId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
