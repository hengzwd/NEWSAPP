package newsemc.com.awit.news.newsemcapp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import newsemc.com.awit.news.newsemcapp.dao.AuditInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table AUDIT_INFO.
*/
public class AuditInfoDao extends AbstractDao<AuditInfo, String> {

    public static final String TABLENAME = "AUDIT_INFO";

    /**
     * Properties of entity AuditInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Name = new Property(0, String.class, "name", true, "NAME");
        public final static Property Ziliao = new Property(1, String.class, "ziliao", false, "ZILIAO");
        public final static Property Counts = new Property(2, String.class, "counts", false, "COUNTS");
    };


    public AuditInfoDao(DaoConfig config) {
        super(config);
    }
    
    public AuditInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'AUDIT_INFO' (" + //
                "'NAME' TEXT PRIMARY KEY NOT NULL ," + // 0: name
                "'ZILIAO' TEXT," + // 1: ziliao
                "'COUNTS' TEXT);"); // 2: counts
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'AUDIT_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AuditInfo entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
 
        String ziliao = entity.getZiliao();
        if (ziliao != null) {
            stmt.bindString(2, ziliao);
        }
 
        String counts = entity.getCounts();
        if (counts != null) {
            stmt.bindString(3, counts);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AuditInfo readEntity(Cursor cursor, int offset) {
        AuditInfo entity = new AuditInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // name
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ziliao
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // counts
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AuditInfo entity, int offset) {
        entity.setName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setZiliao(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCounts(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(AuditInfo entity, long rowId) {
        return entity.getName();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(AuditInfo entity) {
        if(entity != null) {
            return entity.getName();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
