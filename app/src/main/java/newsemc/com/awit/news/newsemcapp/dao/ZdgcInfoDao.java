package newsemc.com.awit.news.newsemcapp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import newsemc.com.awit.news.newsemcapp.dao.ZdgcInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ZDGC_INFO.
*/
public class ZdgcInfoDao extends AbstractDao<ZdgcInfo, String> {

    public static final String TABLENAME = "ZDGC_INFO";

    /**
     * Properties of entity ZdgcInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Buildname = new Property(0, String.class, "buildname", true, "BUILDNAME");
        public final static Property Designtype = new Property(1, String.class, "designtype", false, "DESIGNTYPE");
        public final static Property Designnum = new Property(2, String.class, "designnum", false, "DESIGNNUM");
        public final static Property Dayfinish = new Property(3, String.class, "dayfinish", false, "DAYFINISH");
        public final static Property Mothfinish = new Property(4, String.class, "mothfinish", false, "MOTHFINISH");
        public final static Property Kailei = new Property(5, String.class, "kailei", false, "KAILEI");
        public final static Property Kaileiratio = new Property(6, String.class, "kaileiratio", false, "KAILEIRATIO");
        public final static Property Plandate = new Property(7, String.class, "plandate", false, "PLANDATE");
        public final static Property Delaynum = new Property(8, String.class, "delaynum", false, "DELAYNUM");
        public final static Property Delaydays = new Property(9, String.class, "delaydays", false, "DELAYDAYS");
    };


    public ZdgcInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ZdgcInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ZDGC_INFO' (" + //
                "'BUILDNAME' TEXT PRIMARY KEY NOT NULL ," + // 0: buildname
                "'DESIGNTYPE' TEXT," + // 1: designtype
                "'DESIGNNUM' TEXT," + // 2: designnum
                "'DAYFINISH' TEXT," + // 3: dayfinish
                "'MOTHFINISH' TEXT," + // 4: mothfinish
                "'KAILEI' TEXT," + // 5: kailei
                "'KAILEIRATIO' TEXT," + // 6: kaileiratio
                "'PLANDATE' TEXT," + // 7: plandate
                "'DELAYNUM' TEXT," + // 8: delaynum
                "'DELAYDAYS' TEXT);"); // 9: delaydays
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ZDGC_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ZdgcInfo entity) {
        stmt.clearBindings();
 
        String buildname = entity.getBuildname();
        if (buildname != null) {
            stmt.bindString(1, buildname);
        }
 
        String designtype = entity.getDesigntype();
        if (designtype != null) {
            stmt.bindString(2, designtype);
        }
 
        String designnum = entity.getDesignnum();
        if (designnum != null) {
            stmt.bindString(3, designnum);
        }
 
        String dayfinish = entity.getDayfinish();
        if (dayfinish != null) {
            stmt.bindString(4, dayfinish);
        }
 
        String mothfinish = entity.getMothfinish();
        if (mothfinish != null) {
            stmt.bindString(5, mothfinish);
        }
 
        String kailei = entity.getKailei();
        if (kailei != null) {
            stmt.bindString(6, kailei);
        }
 
        String kaileiratio = entity.getKaileiratio();
        if (kaileiratio != null) {
            stmt.bindString(7, kaileiratio);
        }
 
        String plandate = entity.getPlandate();
        if (plandate != null) {
            stmt.bindString(8, plandate);
        }
 
        String delaynum = entity.getDelaynum();
        if (delaynum != null) {
            stmt.bindString(9, delaynum);
        }
 
        String delaydays = entity.getDelaydays();
        if (delaydays != null) {
            stmt.bindString(10, delaydays);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ZdgcInfo readEntity(Cursor cursor, int offset) {
        ZdgcInfo entity = new ZdgcInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // buildname
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // designtype
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // designnum
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // dayfinish
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mothfinish
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // kailei
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // kaileiratio
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // plandate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // delaynum
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // delaydays
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ZdgcInfo entity, int offset) {
        entity.setBuildname(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDesigntype(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDesignnum(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDayfinish(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMothfinish(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setKailei(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setKaileiratio(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPlandate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDelaynum(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDelaydays(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(ZdgcInfo entity, long rowId) {
        return entity.getBuildname();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(ZdgcInfo entity) {
        if(entity != null) {
            return entity.getBuildname();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
