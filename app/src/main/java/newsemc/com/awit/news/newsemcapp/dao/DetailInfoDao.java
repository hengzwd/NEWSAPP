package newsemc.com.awit.news.newsemcapp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import newsemc.com.awit.news.newsemcapp.dao.DetailInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DETAIL_INFO.
*/
public class DetailInfoDao extends AbstractDao<DetailInfo, String> {

    public static final String TABLENAME = "DETAIL_INFO";

    /**
     * Properties of entity DetailInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Infoid = new Property(0, String.class, "infoid", true, "INFOID");
        public final static Property Infotype = new Property(1, String.class, "infotype", false, "INFOTYPE");
        public final static Property Htmlpath = new Property(2, String.class, "htmlpath", false, "HTMLPATH");
        public final static Property Num = new Property(3, String.class, "num", false, "NUM");
    };


    public DetailInfoDao(DaoConfig config) {
        super(config);
    }
    
    public DetailInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DETAIL_INFO' (" + //
                "'INFOID' TEXT PRIMARY KEY NOT NULL ," + // 0: infoid
                "'INFOTYPE' TEXT," + // 1: infotype
                "'HTMLPATH' TEXT," + // 2: htmlpath
                "'NUM' TEXT);"); // 3: num
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DETAIL_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DetailInfo entity) {
        stmt.clearBindings();
 
        String infoid = entity.getInfoid();
        if (infoid != null) {
            stmt.bindString(1, infoid);
        }
 
        String infotype = entity.getInfotype();
        if (infotype != null) {
            stmt.bindString(2, infotype);
        }
 
        String htmlpath = entity.getHtmlpath();
        if (htmlpath != null) {
            stmt.bindString(3, htmlpath);
        }
 
        String num = entity.getNum();
        if (num != null) {
            stmt.bindString(4, num);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DetailInfo readEntity(Cursor cursor, int offset) {
        DetailInfo entity = new DetailInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // infoid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // infotype
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // htmlpath
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // num
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DetailInfo entity, int offset) {
        entity.setInfoid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setInfotype(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHtmlpath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNum(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(DetailInfo entity, long rowId) {
        return entity.getInfoid();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(DetailInfo entity) {
        if(entity != null) {
            return entity.getInfoid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
