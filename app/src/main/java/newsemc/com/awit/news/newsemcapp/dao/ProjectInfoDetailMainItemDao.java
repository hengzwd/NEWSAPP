package newsemc.com.awit.news.newsemcapp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import newsemc.com.awit.news.newsemcapp.dao.ProjectInfoDetailMainItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PROJECT_INFO_DETAIL_MAIN_ITEM.
*/
public class ProjectInfoDetailMainItemDao extends AbstractDao<ProjectInfoDetailMainItem, String> {

    public static final String TABLENAME = "PROJECT_INFO_DETAIL_MAIN_ITEM";

    /**
     * Properties of entity ProjectInfoDetailMainItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property ProjectInfoId = new Property(1, String.class, "projectInfoId", false, "PROJECT_INFO_ID");
        public final static Property KongzhiSection = new Property(2, String.class, "kongzhiSection", false, "KONGZHI_SECTION");
    };


    public ProjectInfoDetailMainItemDao(DaoConfig config) {
        super(config);
    }
    
    public ProjectInfoDetailMainItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PROJECT_INFO_DETAIL_MAIN_ITEM' (" + //
                "'ID' TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "'PROJECT_INFO_ID' TEXT," + // 1: projectInfoId
                "'KONGZHI_SECTION' TEXT);"); // 2: kongzhiSection
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PROJECT_INFO_DETAIL_MAIN_ITEM'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ProjectInfoDetailMainItem entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String projectInfoId = entity.getProjectInfoId();
        if (projectInfoId != null) {
            stmt.bindString(2, projectInfoId);
        }
 
        String kongzhiSection = entity.getKongzhiSection();
        if (kongzhiSection != null) {
            stmt.bindString(3, kongzhiSection);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ProjectInfoDetailMainItem readEntity(Cursor cursor, int offset) {
        ProjectInfoDetailMainItem entity = new ProjectInfoDetailMainItem( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // projectInfoId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // kongzhiSection
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ProjectInfoDetailMainItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setProjectInfoId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setKongzhiSection(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(ProjectInfoDetailMainItem entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(ProjectInfoDetailMainItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
