package newsemc.com.awit.news.newsemcapp.dao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import newsemc.com.awit.news.newsemcapp.dao.ImageInfoDao;
import newsemc.com.awit.news.newsemcapp.dao.OASysInfoDao;
import newsemc.com.awit.news.newsemcapp.dao.DetailInfoDao;
import newsemc.com.awit.news.newsemcapp.dao.ProjectInfoDao;
import newsemc.com.awit.news.newsemcapp.dao.ProjectTtrendsInfoDao;
import newsemc.com.awit.news.newsemcapp.dao.MeasureDetailInfoDao;
import newsemc.com.awit.news.newsemcapp.dao.DealInfoDao;
import newsemc.com.awit.news.newsemcapp.dao.PlanInfoDao;
import newsemc.com.awit.news.newsemcapp.dao.ProblemInfoDao;
import newsemc.com.awit.news.newsemcapp.dao.PreceptInfoDao;
import newsemc.com.awit.news.newsemcapp.dao.WorkpieceInfoDao;
import newsemc.com.awit.news.newsemcapp.dao.ScienceInfoDao;
import newsemc.com.awit.news.newsemcapp.dao.AuditInfoDao;
import newsemc.com.awit.news.newsemcapp.dao.CraftInfoDao;
import newsemc.com.awit.news.newsemcapp.dao.SedimentationInfoDao;
import newsemc.com.awit.news.newsemcapp.dao.ProjectImpsInfoDao;
import newsemc.com.awit.news.newsemcapp.dao.LxlBxoInfoDao;
import newsemc.com.awit.news.newsemcapp.dao.DiaoDuInfoDao;
import newsemc.com.awit.news.newsemcapp.dao.LabInfoDao;
import newsemc.com.awit.news.newsemcapp.dao.BhzInfoDao;
import newsemc.com.awit.news.newsemcapp.dao.ZdgcInfoDao;
import newsemc.com.awit.news.newsemcapp.dao.PersonInfoDao;
import newsemc.com.awit.news.newsemcapp.dao.DepartmentInfoDao;
import newsemc.com.awit.news.newsemcapp.dao.LoginInfoDao;
import newsemc.com.awit.news.newsemcapp.dao.DepartsInfoDao;
import newsemc.com.awit.news.newsemcapp.dao.SsidInfoDao;
import newsemc.com.awit.news.newsemcapp.dao.DeptsInfoDao;
import newsemc.com.awit.news.newsemcapp.dao.CompanyInfoDao;
import newsemc.com.awit.news.newsemcapp.dao.IconInfoDao;
import newsemc.com.awit.news.newsemcapp.dao.DanDianLoginPubDao;
import newsemc.com.awit.news.newsemcapp.dao.AlterPwdInfoDao;
import newsemc.com.awit.news.newsemcapp.dao.PushInfoDao;
import newsemc.com.awit.news.newsemcapp.dao.ApkUpdateInfoDao;
import newsemc.com.awit.news.newsemcapp.dao.SpecialAccountInfoDao;
import newsemc.com.awit.news.newsemcapp.dao.CompanyLogoInfoDao;
import newsemc.com.awit.news.newsemcapp.dao.FirstMenuInfoDao;
import newsemc.com.awit.news.newsemcapp.dao.SecondMenuInfoDao;
import newsemc.com.awit.news.newsemcapp.dao.ProjectInfoDetailDao;
import newsemc.com.awit.news.newsemcapp.dao.ProjectInfoDetailPicDao;
import newsemc.com.awit.news.newsemcapp.dao.ProjectInfoDetailPeriodDao;
import newsemc.com.awit.news.newsemcapp.dao.ProjectInfoDetailMainItemDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 1): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 1;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        ImageInfoDao.createTable(db, ifNotExists);
        OASysInfoDao.createTable(db, ifNotExists);
        DetailInfoDao.createTable(db, ifNotExists);
        ProjectInfoDao.createTable(db, ifNotExists);
        ProjectTtrendsInfoDao.createTable(db, ifNotExists);
        MeasureDetailInfoDao.createTable(db, ifNotExists);
        DealInfoDao.createTable(db, ifNotExists);
        PlanInfoDao.createTable(db, ifNotExists);
        ProblemInfoDao.createTable(db, ifNotExists);
        PreceptInfoDao.createTable(db, ifNotExists);
        WorkpieceInfoDao.createTable(db, ifNotExists);
        ScienceInfoDao.createTable(db, ifNotExists);
        AuditInfoDao.createTable(db, ifNotExists);
        CraftInfoDao.createTable(db, ifNotExists);
        SedimentationInfoDao.createTable(db, ifNotExists);
        ProjectImpsInfoDao.createTable(db, ifNotExists);
        LxlBxoInfoDao.createTable(db, ifNotExists);
        DiaoDuInfoDao.createTable(db, ifNotExists);
        LabInfoDao.createTable(db, ifNotExists);
        BhzInfoDao.createTable(db, ifNotExists);
        ZdgcInfoDao.createTable(db, ifNotExists);
        PersonInfoDao.createTable(db, ifNotExists);
        DepartmentInfoDao.createTable(db, ifNotExists);
        LoginInfoDao.createTable(db, ifNotExists);
        DepartsInfoDao.createTable(db, ifNotExists);
        SsidInfoDao.createTable(db, ifNotExists);
        DeptsInfoDao.createTable(db, ifNotExists);
        CompanyInfoDao.createTable(db, ifNotExists);
        IconInfoDao.createTable(db, ifNotExists);
        DanDianLoginPubDao.createTable(db, ifNotExists);
        AlterPwdInfoDao.createTable(db, ifNotExists);
        PushInfoDao.createTable(db, ifNotExists);
        ApkUpdateInfoDao.createTable(db, ifNotExists);
        SpecialAccountInfoDao.createTable(db, ifNotExists);
        CompanyLogoInfoDao.createTable(db, ifNotExists);
        FirstMenuInfoDao.createTable(db, ifNotExists);
        SecondMenuInfoDao.createTable(db, ifNotExists);
        ProjectInfoDetailDao.createTable(db, ifNotExists);
        ProjectInfoDetailPicDao.createTable(db, ifNotExists);
        ProjectInfoDetailPeriodDao.createTable(db, ifNotExists);
        ProjectInfoDetailMainItemDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        ImageInfoDao.dropTable(db, ifExists);
        OASysInfoDao.dropTable(db, ifExists);
        DetailInfoDao.dropTable(db, ifExists);
        ProjectInfoDao.dropTable(db, ifExists);
        ProjectTtrendsInfoDao.dropTable(db, ifExists);
        MeasureDetailInfoDao.dropTable(db, ifExists);
        DealInfoDao.dropTable(db, ifExists);
        PlanInfoDao.dropTable(db, ifExists);
        ProblemInfoDao.dropTable(db, ifExists);
        PreceptInfoDao.dropTable(db, ifExists);
        WorkpieceInfoDao.dropTable(db, ifExists);
        ScienceInfoDao.dropTable(db, ifExists);
        AuditInfoDao.dropTable(db, ifExists);
        CraftInfoDao.dropTable(db, ifExists);
        SedimentationInfoDao.dropTable(db, ifExists);
        ProjectImpsInfoDao.dropTable(db, ifExists);
        LxlBxoInfoDao.dropTable(db, ifExists);
        DiaoDuInfoDao.dropTable(db, ifExists);
        LabInfoDao.dropTable(db, ifExists);
        BhzInfoDao.dropTable(db, ifExists);
        ZdgcInfoDao.dropTable(db, ifExists);
        PersonInfoDao.dropTable(db, ifExists);
        DepartmentInfoDao.dropTable(db, ifExists);
        LoginInfoDao.dropTable(db, ifExists);
        DepartsInfoDao.dropTable(db, ifExists);
        SsidInfoDao.dropTable(db, ifExists);
        DeptsInfoDao.dropTable(db, ifExists);
        CompanyInfoDao.dropTable(db, ifExists);
        IconInfoDao.dropTable(db, ifExists);
        DanDianLoginPubDao.dropTable(db, ifExists);
        AlterPwdInfoDao.dropTable(db, ifExists);
        PushInfoDao.dropTable(db, ifExists);
        ApkUpdateInfoDao.dropTable(db, ifExists);
        SpecialAccountInfoDao.dropTable(db, ifExists);
        CompanyLogoInfoDao.dropTable(db, ifExists);
        FirstMenuInfoDao.dropTable(db, ifExists);
        SecondMenuInfoDao.dropTable(db, ifExists);
        ProjectInfoDetailDao.dropTable(db, ifExists);
        ProjectInfoDetailPicDao.dropTable(db, ifExists);
        ProjectInfoDetailPeriodDao.dropTable(db, ifExists);
        ProjectInfoDetailMainItemDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(ImageInfoDao.class);
        registerDaoClass(OASysInfoDao.class);
        registerDaoClass(DetailInfoDao.class);
        registerDaoClass(ProjectInfoDao.class);
        registerDaoClass(ProjectTtrendsInfoDao.class);
        registerDaoClass(MeasureDetailInfoDao.class);
        registerDaoClass(DealInfoDao.class);
        registerDaoClass(PlanInfoDao.class);
        registerDaoClass(ProblemInfoDao.class);
        registerDaoClass(PreceptInfoDao.class);
        registerDaoClass(WorkpieceInfoDao.class);
        registerDaoClass(ScienceInfoDao.class);
        registerDaoClass(AuditInfoDao.class);
        registerDaoClass(CraftInfoDao.class);
        registerDaoClass(SedimentationInfoDao.class);
        registerDaoClass(ProjectImpsInfoDao.class);
        registerDaoClass(LxlBxoInfoDao.class);
        registerDaoClass(DiaoDuInfoDao.class);
        registerDaoClass(LabInfoDao.class);
        registerDaoClass(BhzInfoDao.class);
        registerDaoClass(ZdgcInfoDao.class);
        registerDaoClass(PersonInfoDao.class);
        registerDaoClass(DepartmentInfoDao.class);
        registerDaoClass(LoginInfoDao.class);
        registerDaoClass(DepartsInfoDao.class);
        registerDaoClass(SsidInfoDao.class);
        registerDaoClass(DeptsInfoDao.class);
        registerDaoClass(CompanyInfoDao.class);
        registerDaoClass(IconInfoDao.class);
        registerDaoClass(DanDianLoginPubDao.class);
        registerDaoClass(AlterPwdInfoDao.class);
        registerDaoClass(PushInfoDao.class);
        registerDaoClass(ApkUpdateInfoDao.class);
        registerDaoClass(SpecialAccountInfoDao.class);
        registerDaoClass(CompanyLogoInfoDao.class);
        registerDaoClass(FirstMenuInfoDao.class);
        registerDaoClass(SecondMenuInfoDao.class);
        registerDaoClass(ProjectInfoDetailDao.class);
        registerDaoClass(ProjectInfoDetailPicDao.class);
        registerDaoClass(ProjectInfoDetailPeriodDao.class);
        registerDaoClass(ProjectInfoDetailMainItemDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
