package newsemc.com.awit.news.newsemcapp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import newsemc.com.awit.news.newsemcapp.dao.CraftInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CRAFT_INFO.
*/
public class CraftInfoDao extends AbstractDao<CraftInfo, String> {

    public static final String TABLENAME = "CRAFT_INFO";

    /**
     * Properties of entity CraftInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Infoimg = new Property(0, String.class, "infoimg", true, "INFOIMG");
    };


    public CraftInfoDao(DaoConfig config) {
        super(config);
    }
    
    public CraftInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CRAFT_INFO' (" + //
                "'INFOIMG' TEXT PRIMARY KEY NOT NULL );"); // 0: infoimg
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CRAFT_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CraftInfo entity) {
        stmt.clearBindings();
 
        String infoimg = entity.getInfoimg();
        if (infoimg != null) {
            stmt.bindString(1, infoimg);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CraftInfo readEntity(Cursor cursor, int offset) {
        CraftInfo entity = new CraftInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0) // infoimg
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CraftInfo entity, int offset) {
        entity.setInfoimg(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(CraftInfo entity, long rowId) {
        return entity.getInfoimg();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(CraftInfo entity) {
        if(entity != null) {
            return entity.getInfoimg();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
